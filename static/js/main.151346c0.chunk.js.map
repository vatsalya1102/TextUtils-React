{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","backgroundColor","onChange","event","target","rows","placeholder","newText","toUpperCase","showAlert","toLowerCase","copytext","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.151346c0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n          </li> */}\r\n        </ul>\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input type=\"checkbox\" className=\"form-check-input\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title:\"Set title here\",\r\n    aboutText:\"About\"\r\n}\r\n","import React, {useState} from 'react'\r\n\r\n//text is state variable here, and its value is set to \"Enter text here\", we will change its value by using setText function\r\n//const [text, setText] = useState('Enter text here');\r\n//text.split(\" \") makes an array\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () =>{\r\n    //    console.log(\"Uppercase was clicked\"+ text); \r\n       let newText = text.toUpperCase();\r\n       setText(newText)\r\n       props.showAlert(\"Converted to upper case\", \"success\")\r\n    }\r\n\r\n    const handleLoClick = () =>{ \r\n         let newText = text.toLowerCase();\r\n         setText(newText)\r\n         props.showAlert(\"Converted to lower case\", \"success\")\r\n      }\r\n\r\n    const handleClearClick = () =>{ \r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Text is cleared\", \"success\")\r\n     }\r\n\r\n    const handleCopy = () =>{\r\n      let copytext = document.getElementById(\"myBox\");\r\n      copytext.select();\r\n      navigator.clipboard.writeText(copytext.value);\r\n      props.showAlert(\"Text copied to clipboard\", \"success\")\r\n    } \r\n\r\n    const handleExtraSpaces = () =>{\r\n      let newText = text.split(/[ ]+/);\r\n      setText(newText.join(\" \"))\r\n      props.showAlert(\"Extra spaces removed\", \"success\")\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"On change\"); \r\n        setText(event.target.value);\r\n     }\r\n\r\n  const [text, setText] = useState(\"\");\r\n//   text = \"new text\"; //Incorrect way to change the state\r\n//   setText(\"New text\"); //Correct way to change the state\r\n\r\nreturn (\r\n  <>\r\n  <div className='container'  style={{color: props.mode==='dark'?'white':'black'}}>\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"mb-3\">\r\n    <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" onChange={handleOnChange} rows=\"8\" placeholder='Type here'></textarea>\r\n    </div>\r\n    <button className=\"btn btn-primary m-2\" onClick={handleUpClick}>Convert to Uppercases</button>\r\n    <button className=\"btn btn-primary m-2\" onClick={handleLoClick}>Convert to Lowerrcases</button>\r\n    <button className=\"btn btn-primary m-2\" onClick={handleClearClick}>Clear text</button>\r\n    <button className=\"btn btn-primary m-2\" onClick={handleCopy}>Copy text</button>\r\n    <button className=\"btn btn-primary m-2\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n  </div>\r\n\r\n  <div className=\"container my-3\"  style={{color: props.mode==='dark'?'white':'black'}}>\r\n    <h2>Your text summary</h2>\r\n    <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n    <p>{0.008*text.split(\" \").length} Minutes Read</p>\r\n    <h3>Preview</h3>\r\n    <p>{text.length>0?text:\"Enter something to preview\"}</p>\r\n  </div>\r\n  </>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\n//The code below is function based component\n//The code in return ( ) is JSX\nfunction App() {\n\n  const [mode, setMode] = useState('light'); //Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() =>{\n      setAlert(null);\n    }, 2000);\n  }\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title=\"TextUtils - Dark Mode\";\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n  \n  return (\n    <>\n{/* <Router> */}\n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n<Alert alert={alert}/>\n<div className=\"container my-3\">\n  {/* <Routes>\n    <Route exact path=\"/about\" element={<About/>}></Route>\n    <Route exact path=\"/\" element={<TextForm mode={mode} showAlert={showAlert} />}></Route>\n  </Routes> */}\n  <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n</div>\n{/* </Router> */}\n  </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}